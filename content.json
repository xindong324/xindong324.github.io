{"pages":[{"title":"About Me","text":"Dong Xin (董鑫)Major: Aircraft DesignPh DBeihang UniversityEmail: xindong324@buaa.edu.cnWechat: xindong324","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"My Favorite Music","text":"","link":"/2020/02/28/2020-02-28/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy hexo 创建文章 &amp; 文章缩略图及banner &amp; MarkDown More info: Deployment","link":"/2020/08/29/hello-world/"},{"title":"Gazebo踩坑记录","text":"Gazebo 创建一个模型 Gazebo 获取模型的状态(位姿、速度等) 这个比较详细 订阅topic方法、订阅Service方法 Gazebo中获得任意model的groundtruth的pose rosbag数据记录及转换图片、视频 ArUco估计相机位姿, 另一篇 rosbag 存储话题到txt rostopic echo -b file_name.bag -p /topic_name &gt; Txt_name.txt ROS四元数、欧拉角互转 aruco_ros使用 ros c++ spinOnce 放在一进入while的第一行 ROS学习 &lt;十一&gt; Parameter的设置与查询 Sophus 中SE3初始化应用旋转矩阵而不是欧拉角否则会有问题，参见 结合SLAM十四讲的示例程序理解SE3, se(3), so(3),R, t等 ROS四元数、欧拉角互转 ROS学习笔记（三）：rosrun和runlaunch的用法, roslaunch 中使用param Tensorflow tf.layers.Dense与 tf.layers.dense的区别","link":"/2020/05/29/Gazebo%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"},{"title":"mavros踩坑记录","text":"gazebo仿真中添加距离传感器以px4源码中 iris_fpv_cam 为例，修改sdf文件，加入sf01a超声波传感器(未提供tfmini模型)，加入后变为 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version='1.0'?&gt;&lt;sdf version='1.5'&gt; &lt;model name='iris_fpv_cam'&gt; &lt;include&gt; &lt;uri&gt;model://iris&lt;/uri&gt; &lt;/include&gt; &lt;include&gt; &lt;uri&gt;model://fpv_cam&lt;/uri&gt; &lt;pose&gt;0 0 0 0 1.57 0&lt;/pose&gt; &lt;/include&gt; &lt;joint name=&quot;fpv_cam_joint&quot; type=&quot;fixed&quot;&gt; &lt;child&gt;fpv_cam::link&lt;/child&gt; &lt;parent&gt;iris::base_link&lt;/parent&gt; &lt;axis&gt; &lt;xyz&gt;0 0 1&lt;/xyz&gt; &lt;limit&gt; &lt;upper&gt;0&lt;/upper&gt; &lt;lower&gt;0&lt;/lower&gt; &lt;/limit&gt; &lt;/axis&gt; &lt;/joint&gt; &lt;!--lidar--&gt; &lt;include&gt; &lt;uri&gt;model://sf10a&lt;/uri&gt; &lt;pose&gt;0 0 -0.05 0 0 0&lt;/pose&gt; &lt;/include&gt; &lt;joint name=&quot;sf10a_joint&quot; type=&quot;fixed&quot;&gt; &lt;parent&gt;iris::base_link&lt;/parent&gt; &lt;child&gt;sf10a::link&lt;/child&gt; &lt;/joint&gt; &lt;/model&gt;&lt;/sdf&gt; mavros添加发布 tfmini 距离传感器数据有关px4连接tfmini并配置的部分请自行到 Px4 使用手册 查找相关说明，配置成功后打开QGroundControl， 找到Mavlink Inspector， 选择 DISTANCE_SENSOR可以看到发布的高度传感器的id和数据首先说明下MAVROS px4在启动时调用 roslaunch mavros px4.launch &lt;args&gt; ，打开($ find mavros)/mavros/launch/px4.launch 12345678910111213141516171819202122232425&lt;launch&gt; &lt;!-- vim: set ft=xml noet : --&gt; &lt;!-- example launch script for PX4 based FCU's --&gt; &lt;arg name=&quot;fcu_url&quot; default=&quot;/dev/ttyACM0:57600&quot; /&gt; &lt;arg name=&quot;gcs_url&quot; default=&quot;&quot; /&gt; &lt;arg name=&quot;tgt_system&quot; default=&quot;1&quot; /&gt; &lt;arg name=&quot;tgt_component&quot; default=&quot;1&quot; /&gt; &lt;arg name=&quot;log_output&quot; default=&quot;screen&quot; /&gt; &lt;arg name=&quot;fcu_protocol&quot; default=&quot;v2.0&quot; /&gt; &lt;arg name=&quot;respawn_mavros&quot; default=&quot;false&quot; /&gt; &lt;include file=&quot;$(find mavros)/launch/node.launch&quot;&gt; &lt;arg name=&quot;pluginlists_yaml&quot; value=&quot;$(find mavros)/launch/px4_pluginlists.yaml&quot; /&gt; &lt;arg name=&quot;config_yaml&quot; value=&quot;$(find mavros)/launch/px4_config.yaml&quot; /&gt; &lt;arg name=&quot;fcu_url&quot; value=&quot;$(arg fcu_url)&quot; /&gt; &lt;arg name=&quot;gcs_url&quot; value=&quot;$(arg gcs_url)&quot; /&gt; &lt;arg name=&quot;tgt_system&quot; value=&quot;$(arg tgt_system)&quot; /&gt; &lt;arg name=&quot;tgt_component&quot; value=&quot;$(arg tgt_component)&quot; /&gt; &lt;arg name=&quot;log_output&quot; value=&quot;$(arg log_output)&quot; /&gt; &lt;arg name=&quot;fcu_protocol&quot; value=&quot;$(arg fcu_protocol)&quot; /&gt; &lt;arg name=&quot;respawn_mavros&quot; default=&quot;$(arg respawn_mavros)&quot; /&gt; &lt;/include&gt;&lt;/launch&gt; 然后定位到 node.launch 1234567891011121314151617181920212223242526&lt;launch&gt; &lt;!-- vim: set ft=xml noet : --&gt; &lt;!-- base node launch file--&gt; &lt;arg name=&quot;fcu_url&quot; /&gt; &lt;arg name=&quot;gcs_url&quot; /&gt; &lt;arg name=&quot;tgt_system&quot; /&gt; &lt;arg name=&quot;tgt_component&quot; /&gt; &lt;arg name=&quot;pluginlists_yaml&quot; /&gt; &lt;arg name=&quot;config_yaml&quot; /&gt; &lt;arg name=&quot;log_output&quot; default=&quot;screen&quot; /&gt; &lt;arg name=&quot;fcu_protocol&quot; default=&quot;v2.0&quot; /&gt; &lt;arg name=&quot;respawn_mavros&quot; default=&quot;false&quot; /&gt; &lt;node pkg=&quot;mavros&quot; type=&quot;mavros_node&quot; name=&quot;mavros&quot; required=&quot;$(eval not respawn_mavros)&quot; clear_params=&quot;true&quot; output=&quot;$(arg log_output)&quot; respawn=&quot;$(arg respawn_mavros)&quot;&gt; &lt;param name=&quot;fcu_url&quot; value=&quot;$(arg fcu_url)&quot; /&gt; &lt;param name=&quot;gcs_url&quot; value=&quot;$(arg gcs_url)&quot; /&gt; &lt;param name=&quot;target_system_id&quot; value=&quot;$(arg tgt_system)&quot; /&gt; &lt;param name=&quot;target_component_id&quot; value=&quot;$(arg tgt_component)&quot; /&gt; &lt;param name=&quot;fcu_protocol&quot; value=&quot;$(arg fcu_protocol)&quot; /&gt; &lt;!-- load blacklist, config --&gt; &lt;rosparam command=&quot;load&quot; file=&quot;$(arg pluginlists_yaml)&quot; /&gt; &lt;rosparam command=&quot;load&quot; file=&quot;$(arg config_yaml)&quot; /&gt; &lt;/node&gt;&lt;/launch&gt; 可以看出node.launch是主节点，调用了配置文件 px4_config.yaml 和插件配置文件 px4_pluginlists.yaml。 px4_config文件主要是定义了发布和订阅的节点，有关distance sensor的部分如下: 可以看出config 文件中定义了有关distance sensor的部分，但是直接运行mavros的显示信息以及rostopic list的结果如下，可以看出是没有发布distance sensor相关的topic的： 原因是px4_pluginlists文件中定义了调用的插件的黑白名单，内容如下:因此可以看出distance sensor被添加到了黑名单中，将其注释掉: 再次运行mavros，rostopic list结果如下： 可以看到config中定义的distance sensor都被发布出来了，此时，由于我们只使用到了tfmini，从QGround中看出其id为0，因此对config文件做如下修改，只保留tfmini的topic：此时再次运行mavros，rostopic list结果为：同时我们对话题进行 echo： enjoy!","link":"/2020/06/26/mavros%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"},{"title":"stm32 pwm 控制电机正反转","text":"STM32 的通用 TIMx (TIM2~TIM5 和 TIM9~TIM14): stm32f405rgt6(LQFP 64) 通用定时器对应的io口映射：注意，使用时发现，表格的语句上一行必须为空行，不然表格不生效。 | TIM x | CH x | io pin|:-:|:-:|:-:|| TIM2 | CH2 | PA1 PB3 || TIM2 | CH3 | PA2 PB10 || TIM2 | CH4 | PA3 PB11 || TIM3 | CH1 | PC6 PB4 PA6 || TIM3 | CH2 | PC7 PB5 PA7 || TIM3 | CH3 | PC8 PB0 || TIM3 | CH4 | PC9 PB1 || TIM5 | CH1 | PA0 || TIM5 | CH2 | PA1 || TIM5 | CH3 | PA2 || TIM5 | CH4 | PA3 || TIM4 | CH1 | PB6 || TIM4 | CH2 | PB7 || TIM4 | CH3 | PB8 || TIM4 | CH4 | PB9 || TIM10 | CH1 | PB8 || TIM11 | CH1 | PB9 || TIM12 | CH1 | PB14 || TIM12 | CH2 | PB15 || TIM13 | CH1 | PA6 || TIM14 | CH1 | PA7 | | 排序方法 | 平均情况 | 最好情况 | 最坏情况 | 辅助空间 | 稳定性 | |:—–|:—–|:—–|:—–|:—–|:—–| | 冒泡排序 | O(n²) | O(nlogn) | O(n²) | O(1) | 稳定 | | 简单选择 | O(n²) | O(n²) | O(n²) | O(1) | 稳定 | | 直接插入 | O(n²) | O(n) | O(n²) | O(1) | 稳定 | | 希尔排序 | O(nlogn)~O(n²) | O(n^1.3) | O(n²) | O(1) | 不稳定 | | 堆排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(1) | 不稳定 | | 归并排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(n) | 不稳定 | | 快速排序 | O(nlogn) | O(nlogn) | O(n²) | O(nlogn)~O(n) | 不稳定 | 参数|描述—|—|—width| 设置layout viewport 的宽度，为一个正整数，或字符串”width-device”initial-scale| 设置页面的初始缩放值，为一个数字，可以带小数minimum-scale| 允许用户的最小缩放值，为一个数字，可以带小数maximum-scale| 允许用户的最大缩放值，为一个数字，可以带小数 height| 设置layout viewport 的高度，这个属性对我们并不重要，很少使用 user-scalable| 是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes代表允许 代码实现使用PA6 PA7( TIM3的1 2 通道)产生两路pwm波，实现电机的正反转 定时器初始化12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758//TIM3 PWM 初始化 PA6 TIM3CH1 PA7 TIM3 CH2 //arr 自动重装值//psc 时钟预分频系数void TIM3_PWM_Init(u32 arr,u32 psc){ //io口配置 GPIO_InitTypeDef GPIO_InitStructure; TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure; TIM_OCInitTypeDef TIM_OCInitStructure; RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE); //TIM3 时钟初始化 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE); //GPIO口初始化 GPIO_PinAFConfig(GPIOA,GPIO_PinSource6,GPIO_AF_TIM3); //GPIO复用为定时器功能 GPIO_PinAFConfig(GPIOA,GPIO_PinSource7,GPIO_AF_TIM3); GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7; //GPIO GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF; //复用功能 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; //速度100MHz GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出 GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉 GPIO_Init(GPIOA,&amp;GPIO_InitStructure); //定时器配置 TIM_TimeBaseStructure.TIM_Prescaler=psc; //时钟预分频 TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; //向上计数模式 TIM_TimeBaseStructure.TIM_Period=arr; //自动重装载值 TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1; TIM_TimeBaseInit(TIM3,&amp;TIM_TimeBaseStructure);//TIM3 //定时器pwm输出配置 TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; // pwm 脉宽调制1模式 即计数器值小于比较值时高电平大于时低电平 TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; //比较输出使能 TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; //输出比较极性高 TIM_OCInitStructure.TIM_OutputNState = TIM_OutputState_Disable; //N?????? TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset ; // 必须加，否则只有一路输出 TIM_OC1Init(TIM3, &amp;TIM_OCInitStructure); //tim3 ch1 初始化 TIM_OC2Init(TIM3, &amp;TIM_OCInitStructure); //tim3 ch2 初始化 TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable); //使能tim3 ch1 预装载寄存器 TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable); //使能tim3 ch2 预装载寄存器 TIM_ARRPreloadConfig(TIM3,ENABLE);//ARPE使能 TIM_Cmd(TIM3, ENABLE); //使能TIM3 } void Prun(u32 c1,u32 c2){ TIM_SetCompare1(TIM3,c1); // TIM3 CH1 比较，大于c1反转 TIM_SetCompare2(TIM3,c2); } 主函数 所用芯片时钟频率为84Mhz，预分频系数84，最大计数值为1000，则pwm频率为 f=84MHz/(84*1000) = 1KHz 1234567891011121314151617181920212223242526272829int main(void){ u16 PWM_HZ = 1000; // pwm运行频率 1kHz 1ms u16 PSC = 84 ; //时钟预分频系数 u32 CLK_CNT = 84000000; u32 TOTAL_CLK_HZ = CLK_CNT/PSC; // 1s 的计数次数 84M/84 = 1M hz u32 TOTAL_CNT = TOTAL_CLK_HZ/PWM_HZ; //定时器的最大计数值，决定了pwm的频率 u8 dir=1; u32 ms_delay = 500; // 10ms/doublerate u32 cnt_cmp = 80; //高电平持续8% NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); //中断分组初始化 delay_init(168); //延时初始化 // uart_init(115200);//串口波特率初始化 TIM3_PWM_Init(TOTAL_CNT-1,PSC-1); //pwm初始化 while(1) //主循环 { delay_ms(ms_delay); //每0.5s反转一次 if(dir) { dir = 0; Prun(cnt_cmp,0);//dir==1 正转 } else { dir = 1; Prun(0,cnt_cmp); //dir==0 反转 } }} 部分踩坑TIM5 在四路pwm输出测试中(PA0 1 2 3), PA1持续输出不受控制的方波, 其他三路正常,暂时未找到原因,待调试.TIM3 (PC 6-9)四路pwm输出正常TIM4 (PB6-9)四路PWM输出正常","link":"/2021/01/28/stm32-pwm-%E6%8E%A7%E5%88%B6%E7%94%B5%E6%9C%BA%E6%AD%A3%E5%8F%8D%E8%BD%AC/"}],"tags":[{"name":"Music","slug":"Music","link":"/tags/Music/"},{"name":"UAV","slug":"UAV","link":"/tags/UAV/"},{"name":"GAZEBO","slug":"GAZEBO","link":"/tags/GAZEBO/"},{"name":"MAVROS","slug":"MAVROS","link":"/tags/MAVROS/"},{"name":"PX4","slug":"PX4","link":"/tags/PX4/"},{"name":"STM32","slug":"STM32","link":"/tags/STM32/"},{"name":"PWM","slug":"PWM","link":"/tags/PWM/"},{"name":"MOTOR","slug":"MOTOR","link":"/tags/MOTOR/"}],"categories":[{"name":"Music","slug":"Music","link":"/categories/Music/"},{"name":"AI","slug":"AI","link":"/categories/AI/"},{"name":"GAZEBO","slug":"GAZEBO","link":"/categories/GAZEBO/"},{"name":"UAV","slug":"UAV","link":"/categories/UAV/"},{"name":"STM32","slug":"STM32","link":"/categories/STM32/"}]}